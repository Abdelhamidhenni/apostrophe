
@apos-translucent-opacity: 0.4;

.apos-area, .apos-area-widgets, .apos-area-widget { position: relative; }

.apos-area
{
  // When an area's limit is reached, it shouldn't display controls
  // to add more content. We use direct children selectors to in order
  // to support nested areas.
  &.apos-limit-reached
  {
    >.apos-ui .apos-area-controls,
    >[data-apos-widgets]>[data-apos-widget-wrapper]>.apos-ui .apos-area-controls { display: none !important; }
  }
  // When we are dragging a widget, we want it to be at the forefront.
  .apos-area-widget.ui-draggable-dragging { z-index: @apos-z-index-9; }
  &.apos-empty
  {
    // When there aren't any widgets in an area, it should have a height
    // and a background color set by default.
    height: 80px;
    background-color: @apos-light;
    // When there aren't any widgets in an area, the add content controls
    // should appear absolutely positioned in the empty state.
    >.apos-ui .apos-area-controls
    {
      position: absolute;
      opacity: @apos-translucent-opacity;
      display: block;
      top: 50%;
      transform: translateY(-50%);
      .apos-area-divider { display: none; }
    }
    >.apos-ui .apos-area-controls--singleton
    {
      transform: none;
      top: auto;
      bottom: @apos-padding-2;
      left: @apos-padding-2;
      &:hover { opacity: 1; }
    }
  }
}

.apos-area-widget {
  >.apos-ui .apos-area-widget-controls { opacity: 0; }
  &:hover>.apos-ui .apos-area-widget-controls { opacity: @apos-translucent-opacity; }
  >.apos-ui .apos-area-widget-controls:hover { opacity: 1; }
  // When an area has a limit of one, its children widgets shouldn't
  // display the arrow organization controls.
  >.apos-ui.apos-limit-one [data-apos-move-item] { display: none; }
}

// Widget controls positioning
.apos-area-widget-controls
{
  position: absolute;
  z-index: @apos-z-index-4;
  .apos-transition;
}
.apos-area-widget-controls--context
{
  top: @apos-padding-1;
  left: @apos-padding-1;
}
.apos-area-widget-controls--data
{
  bottom: @apos-padding-1;
  left: @apos-padding-1;
}

.apos-area-widget--contextual>.apos-ui .apos-area-widget-controls--data { display: none; }

// Styles for the drag-target separator between widgets.
.apos-area-item-separator
{
  opacity: 0;
  padding: 0;
  margin: 0;
  border: 0px dashed @apos-base;
  &.apos-hover { background-color: fade(@apos-base, 50%); }
  .apos-transition;
}

.apos-dragging .apos-area-item-separator
{
  border-width: 1px;
  opacity: 1;
  padding: @apos-padding-1;
  margin: @apos-margin-1/2 0;
}

.apos-empty .apos-area-item-separator
{
  height: 100%;
  padding: 0;
}

.apos-ui .apos-dropdown.apos-dropdown--area-controls
{
  display: inherit;
  .apos-drop-shadow(0, 0, 0, 0);
  >.apos-button
  {
    border: 2px solid @apos-white;
    .apos-rounded(@apos-padding-3);
    .apos-drop-shadow();
  }
  >.apos-dropdown-items
  {
    text-align: left;
    left: auto;
    .apos-rounded;
    transform: translate(-46%, -20px);
  }
}

.apos-ui .apos-dropdown.apos-dropdown--area-controls
{
  &.apos-active
  {
    >.apos-button>i { transform: translateX(-50%) rotate(45deg); }
    >.apos-dropdown-items { transform: translate(-46%, -10px); }
  }
}

.apos-area-controls
{
  position: absolute;
  width: 100%;
  text-align: center;
  opacity: 0;
  display: none;
  z-index: @apos-z-index-1;

  &.apos-area-controls--singleton
  {
    display: block;
    opacity: 1;
    text-align: left;
  }
}

[data-apos-area-controls-original] .apos-area-controls
{
  top: 0;
  transform: translateY(-50%);
}

.apos-area-widget-wrapper>.apos-ui>.apos-area-controls
{
  bottom: 0;
  transform: translateY(50%);
  .apos-transition;
}

// We only want to show area add content controls for the actively hovered area,
// which is determined in area's editor.js.
.apos-area.apos-hover
{
  >[data-apos-area-controls-original]>.apos-area-controls,
  >.apos-area-widgets>.apos-area-widget-wrapper:hover>.apos-ui>.apos-area-controls
  {
    display: block;
    opacity: @apos-translucent-opacity;
    &:hover { opacity: 1; }
  }
}
// The horizontal line under the add content button which divides areas
.apos-area-controls .apos-area-divider
{
  width: 100%;
  height: 3px;
  transform: translateY(-13px);
  background-color: @apos-base;
  z-index: 0;
}
// TODO figure out how to select these specifically enough that !important isn't necessary
.apos-area-controls.apos-active { opacity: 1 !important; display: block; z-index: @apos-z-index-5; }
.apos-dragging .apos-area-controls { opacity: 0 !important; }
.apos-rich-text-active .apos-area-controls { display: none !important; }
